#!/bin/bash

# $1 is the first variable which is also your project's name.
# Make sure the user provides a name for the project
if [[ "$1" == "" ]]; then
  echo "Please enter a name for the project!"
  exit 1
fi

# Make sure there is no existing project with the same name

if [[ -d $1.Solution ]]; then
  echo "Project already exists!"
  exit 1
fi

# Set up project 
mkdir $1.Solution
mkdir $1.Solution/$1
mkdir $1.Solution/$1/wwwroot
mkdir $1.Solution/$1/wwwroot/css
mkdir $1.Solution/$1/wwwroot/img
touch $1.Solution/.gitignore 
mkdir $1.Solution/$1/Models
mkdir $1.Solution/$1/Controllers
mkdir $1.Solution/$1/Views
mkdir $1.Solution/$1/Views/Home
touch $1.Solution/$1/Views/Home/Index.cshtml
mkdir $1.Solution/$1/Views/Shared
touch $1.Solution/$1/$1.csproj
touch $1.Solution/$1/Models/$1.cs
mkdir $1.Solution/$1.Tests 
mkdir $1.Solution/$1.Tests/ModelTests
touch $1.Solution/$1.Tests/$1.Tests.csproj
touch $1.Solution/$1.Tests/ModelTests/$1Tests.cs
touch $1.Solution/README.md

# Write to .csproj files
/bin/cat <<EOM >$1.Solution/$1/$1.csproj
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>netcoreapp1.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore" Version="1.1.2" />
    <PackageReference Include="Microsoft.AspNetCore.Http" Version="1.1.2" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="1.1.3" />
    <PackageReference Include="Microsoft.AspNetCore.StaticFiles" Version="1.1.3" />
    <PackageReference Include="MySqlConnector" Version="0.45.0" />
  </ItemGroup>
</Project>
EOM

/bin/cat <<EOM >$1.Solution/$1.Tests/$1.Tests.csproj
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netcoreapp1.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
    <PackageReference Include="MSTest.TestAdapter" Version="1.2" />
    <PackageReference Include="MSTest.TestFramework" Version="1.2" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="../$1/$1.csproj" />
  </ItemGroup>
</Project>
EOM

/bin/cat <<EOM >$1.Solution/$1/Program.cs
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace $1
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var host = new WebHostBuilder()
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .UseIISIntegration()
                .UseStartup<Startup>()
                .Build();

            host.Run();
        }
    }
}
EOM


/bin/cat <<EOM >$1.Solution/$1/Startup.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace $1
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath)
            .AddEnvironmentVariables();
            Configuration = builder.Build();
        }
        public IConfigurationRoot Configuration {get;}
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
        }
        public void Configure(IApplicationBuilder app)
        {
            app.UseDeveloperExceptionPage();
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}"
                );
            });
            app.UseStaticFiles();
            app.Run(async (context)=>
            {
                await context.Response.WriteAsync("Hello World!");
            });
        }
    }
     public static class DBConfiguration
    {
        public static string ConnectionString = "server=localhost;user id=root;password=root;port=8889;database=$1;";
    }
}
EOM

/bin/cat <<EOM >$1.Solution/$1/Views/Shared/_Layout.cshtml
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>$1</title>
    <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'>
    <link rel="stylesheet" href="~/css/styles.css">
  </head>
  <body>
    @RenderBody()
  </body>
</html>
EOM

/bin/cat <<EOM >$1.Solution/$1/Models/Database.cs
using System;
using MySql.Data.MySqlClient;
using $1;
using static $1.Startup;

namespace $1.Models
{
    public class DB
    {
        public static MySqlConnection Connection()
        {
            MySqlConnection conn = new MySqlConnection(DBConfiguration.ConnectionString);
            return conn;
        }
    }
}
EOM

/bin/cat <<EOM >$1.Solution/$1/Controllers/HomeController.cs
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;

namespace $1.Controllers
{
    public class HomeController:Controller{
        [HttpGet("/")]
        public ActionResult Index()
        {
            return View();
        }
    }
}
EOM

#Write to .gitignore
/bin/cat <<EOM >$1.Solution/.gitignore
.vscode
bin/
obj/
EOM

#Restore dependencies
cd $1.Solution/$1.Tests
dotnet restore

#Initialize Git
cd ..
git init
